## Tarefa: Crie um pipeline de CI/CD usando o GitHub Actions para um projeto simples de aplicação web. 

## 1. O pipeline deve ser ativado sempre que um novo commit for feito na branch main. 
on:
  push:
    branches:
      - main
      
## 2. Instalar as dependências do projeto, Executar testes unitários, Construir a aplicação. 
jobs:
  CI:
    runs-on: ubuntu-latest ## imagem para teste
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      ## Validar e fazer login no Docker Hub
      - name: Set up Docker
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.SECRET_RACO1 }}
          password: ${{ secrets.SECRET_RACO }}
          
      ## Construção da imagem Docker
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./src
          file: ./src/Dockerfile
          push: true
          tags: |
            raco21/kube-news:latest
          
      ## Notificar falhas no job por e-mail
      - name: Notify Failure
        if: ${{ failure() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ secrets.EMAIL_USERNAME }}  # Endereço de e-mail do remetente
          subject: "Approval Job Failed - ${{ github.repository }}"
          body: "O job de aprovação falhou para o repositório ${{ github.repository }}. Confira o workflow para mais detalhes."
          to: ${{ secrets.DEVELOPER_EMAIL }}

## Processo de entrega 
  CD: 
    runs-on: ubuntu-latest
    needs:
      - CI
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

        ## 3. Se todos os passos acima forem bem-sucedidos, o pipeline deve fazer o deploy da aplicaçao.

      - name: Set Kubernetes Context ## Apesar de ser da Azure o Context pode ser usado em qualquer cluster que tenha o kube config.
        uses: Azure/k8s-set-context@v3.0
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG }}
     
      - name: Deploy to Kubernetes cluster ## Neste caso também podemos utilizar o actions da Azure.
        uses: Azure/k8s-deploy@v4.9     
        with:
          images: raco21/kube-news:latest
          manifests: |
            k8s/deployment.yaml

    ## 4. Notificar o desenvolvedor via e-mail qunando o processo finalizar
      - name: Notify on CI Approval
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ secrets.EMAIL_USERNAME }}  # Endereço de e-mail do remetente
          subject: "CI Job Approved - ${{ github.repository }}"
          body: "O job CI foi aprovado para o repositório ${{ github.repository }}. Confira o workflow para mais detalhes."
          to: ${{ secrets.DEVELOPER_EMAIL }}                 
